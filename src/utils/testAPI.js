// Script de test pour v√©rifier les appels API en fran√ßais
import { scryfallApi, scryfallApiGeneral, apiUtils } from './api.js';

// Fonction de test pour v√©rifier les appels API
export const testFrenchAPI = async () => {
  console.log('üß™ Test des appels API en fran√ßais...');
  
  try {
    // Test 1: Recherche de cartes
    console.log('\nüìö Test 1: Recherche de cartes');
    const searchResult = await apiUtils.searchCards('Lightning Bolt', 1);
    console.log('Premier r√©sultat:', {
      nom: searchResult.data?.[0]?.name,
      nom_francais: searchResult.data?.[0]?.printed_name,
      langue: searchResult.data?.[0]?.lang
    });
    
    // Test 2: R√©cup√©ration d'une extension
    console.log('\nüóÇÔ∏è Test 2: R√©cup√©ration des extensions');
    const sets = await apiUtils.getSets();
    console.log('Premi√®re extension:', {
      nom: sets?.[0]?.name,
      code: sets?.[0]?.code,
      type: sets?.[0]?.set_type
    });
    
    // Test 3: Cartes d'une extension
    console.log('\nüÉè Test 3: Cartes d\'une extension (DOM)');
    const cards = await apiUtils.getCardsFromSet('dom');
    console.log('Premi√®re carte:', {
      nom: cards?.[0]?.name,
      nom_francais: cards?.[0]?.printed_name,
      langue: cards?.[0]?.lang
    });
    
    // Test 4: V√©rification des param√®tres par d√©faut
    console.log('\n‚öôÔ∏è Test 4: V√©rification des param√®tres par d√©faut');
    console.log('Configuration scryfallApi:', scryfallApi.defaults.params);
    console.log('Configuration scryfallApiGeneral:', scryfallApiGeneral.defaults.params);
    
    console.log('\n‚úÖ Tests termin√©s avec succ√®s !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error);
  }
};

// Test sp√©cifique pour les cartes double face
export const testDoubleFacedCards = async () => {
  console.log('üîÑ Test des cartes double face...');
  
  try {
    const searchResult = await apiUtils.searchCards('Delver of Secrets', 1);
    const card = searchResult.data?.[0];
    
    if (card) {
      console.log('Carte double face trouv√©e:', {
        nom: card.name,
        nom_francais: card.printed_name,
        layout: card.layout,
        faces: card.card_faces?.length || 0
      });
      
      if (card.card_faces) {
        card.card_faces.forEach((face, index) => {
          console.log(`Face ${index}:`, {
            nom: face.name,
            nom_francais: face.printed_name,
            type: face.type_line
          });
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur lors du test des cartes double face:', error);
  }
};

// Fonction pour tester en mode d√©veloppement
if (import.meta.env.DEV) {
  window.testFrenchAPI = testFrenchAPI;
  window.testDoubleFacedCards = testDoubleFacedCards;
}
